package templates

import "net/http"
import "github.com/google/uuid"
import "fmt"
import "web/storage"
import "web/rabbit"
import "strings"
import "web/messages"
import "mime/multipart"
import "google.golang.org/protobuf/types/known/timestamppb"

templ orderPageContent(link string) {
	<h2 class="text-xl"> Thank you for your order </h2>
	<div>
		Please use the link below to check the status of your order: <br/>
		{link}
	</div>
}

templ OrderPage(link string) {
	@Wrapper() {
		@orderPageContent(link) 
	}
}

func parseFileName(id uuid.UUID, fileName string) string {
	substrings := strings.Split(fileName, ".");
	fileFormat := substrings[len(substrings)-1];
	res := fmt.Sprintf("%s.%s", id, fileFormat);
	return res;
}

func parseForm(req *http.Request, id uuid.UUID) (orderContent messages.NewOrder, file multipart.File, fileName string, fileSize int64, err error) {
	file, header, err := req.FormFile("uploadedFile");
	if err != nil {
		return messages.NewOrder{}, nil, "", 0, err;
	} 
	fileName = parseFileName(id, header.Filename);
	fileSize = header.Size;
	err = req.ParseMultipartForm(10240);
	if err != nil {
		return messages.NewOrder{}, nil, "", 0, err;
	}
	email := req.FormValue("email");
	description := req.FormValue("description");
	if email == "" {
		return messages.NewOrder{}, nil, "", 0, http.ErrNoLocation; //just a placeholder for err not to be nil
	}
	orderContent = messages.NewOrder{Id: id.String(), Email: email, Description: description, Date: timestamppb.Now()}
	return orderContent, file, fileName, fileSize, nil
}

func HandleOrderForm(w http.ResponseWriter, req *http.Request) {
	id, _ := uuid.NewUUID()
	link := fmt.Sprintf("http://localhost:2137/orders/%s", id.String());
	orderContent, file, fileName, fileSize, err := parseForm(req, id);
	if err != nil { 
		http.Error(w, err.Error(), http.StatusBadRequest);
	}
	errorChan := make(chan error);
	go storage.UploadData(file, fileName, fileSize, errorChan);
	go rabbit.SendOrderInfo(&orderContent, errorChan);
	for range 2 {
		err := <-errorChan;
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
	}
	OrderPage(link).Render(req.Context(), w)
}
